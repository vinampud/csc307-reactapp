{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivpri\\\\csc307-react-app\\\\packages\\\\react-frontend\\\\src\\\\MyApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; //need to make our MyApp component call fetchUser function \n//the first time the component is rendered, to start the process of requesting the data\nimport Table from \"./Table\";\nimport Form from './Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyApp() {\n  _s();\n  //current state value: characters, update function: setCharacters\n  //const makes a tuple pair \n  const [characters, setCharacters] = useState([]);\n  function fetchUsers() {\n    const promise = fetch(\"http://localhost:8000/users\");\n    return promise; //built in promise: asynchronus processing in JS, need to perform an operation \n    //which will take time to finish/may never finish. don't want code to wait for data to come back to server\n  }\n  // makes a request to the URL which is given as a parameter. \n  // But instead of waiting for the response, it returns immediately with a promise. \n  // This promise will be fulfilled when the response is received back from the server.\n\n  useEffect(() => {\n    //when the promise returned by fetchUsers is fulfilled, we want to set the component state using setCharacters:\n    fetchUsers().then(res => res.json()) // returns a promise, which is only fulfilled when the data is successfully decoded.\n    .then(json => setCharacters(json[\"users_list\"])) //parse response into javascript object, initialize state of comp with given data\n    .catch(error => {\n      console.log(error);\n    });\n  }, []);\n  function removeOneCharacter(index) {\n    const updated = characters.filter((character, i) => {\n      return i !== index;\n    });\n    setCharacters(updated);\n  }\n  function updateList(person) {\n    setCharacters([...characters, person]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      characterData: characters,\n      removeCharacter: removeOneCharacter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      handleSubmit: updateList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(MyApp, \"Lpb9AbqKJ07+xuj4aZ1twNw87e0=\");\n_c = MyApp;\nexport default MyApp; //makes component available to be\n//imported into other comps\nvar _c;\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"names":["React","useState","useEffect","Table","Form","jsxDEV","_jsxDEV","MyApp","_s","characters","setCharacters","fetchUsers","promise","fetch","then","res","json","catch","error","console","log","removeOneCharacter","index","updated","filter","character","i","updateList","person","className","children","characterData","removeCharacter","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","_c","$RefreshReg$"],"sources":["C:/Users/ivpri/csc307-react-app/packages/react-frontend/src/MyApp.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'; //need to make our MyApp component call fetchUser function \r\n//the first time the component is rendered, to start the process of requesting the data\r\nimport Table from \"./Table\";\r\nimport Form from './Form';\r\n\r\n\r\nfunction MyApp() {\r\n    //current state value: characters, update function: setCharacters\r\n    //const makes a tuple pair \r\n    const [characters, setCharacters] = useState([]);\r\n    \r\n    function fetchUsers() {\r\n      const promise = fetch(\"http://localhost:8000/users\");\r\n      return promise; //built in promise: asynchronus processing in JS, need to perform an operation \r\n      //which will take time to finish/may never finish. don't want code to wait for data to come back to server\r\n    }\r\n    // makes a request to the URL which is given as a parameter. \r\n    // But instead of waiting for the response, it returns immediately with a promise. \r\n    // This promise will be fulfilled when the response is received back from the server.\r\n    \r\n    useEffect(() => {//when the promise returned by fetchUsers is fulfilled, we want to set the component state using setCharacters:\r\n      fetchUsers()\r\n        .then((res) => res.json()) // returns a promise, which is only fulfilled when the data is successfully decoded.\r\n        .then((json) => setCharacters(json[\"users_list\"])) //parse response into javascript object, initialize state of comp with given data\r\n        .catch((error) => { console.log(error); });\r\n    }, [] );\r\n\r\n    function removeOneCharacter (index) {\r\n      const updated = characters.filter((character, i) => {\r\n        return i !== index\r\n      });\r\n      setCharacters(updated);\r\n    }\r\n\r\n    function updateList(person) {\r\n        setCharacters([...characters, person]);\r\n      }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Table characterData={characters} \r\n                removeCharacter={removeOneCharacter} />\r\n            <Form handleSubmit={updateList} />\r\n        </div>  \r\n    )\r\n\r\n  }\r\n\r\n\r\n  export default MyApp; //makes component available to be\r\n  //imported into other comps\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO,CAAC,CAAC;AAClD;AACA,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhD,SAASU,UAAUA,CAAA,EAAG;IACpB,MAAMC,OAAO,GAAGC,KAAK,CAAC,6BAA6B,CAAC;IACpD,OAAOD,OAAO,CAAC,CAAC;IAChB;EACF;EACA;EACA;EACA;;EAEAV,SAAS,CAAC,MAAM;IAAC;IACfS,UAAU,CAAC,CAAC,CACTG,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CAC1BF,IAAI,CAAEE,IAAI,IAAKN,aAAa,CAACM,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAAA,CAClDC,KAAK,CAAEC,KAAK,IAAK;MAAEC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAAE,CAAC,CAAC;EAC9C,CAAC,EAAE,EAAG,CAAC;EAEP,SAASG,kBAAkBA,CAAEC,KAAK,EAAE;IAClC,MAAMC,OAAO,GAAGd,UAAU,CAACe,MAAM,CAAC,CAACC,SAAS,EAAEC,CAAC,KAAK;MAClD,OAAOA,CAAC,KAAKJ,KAAK;IACpB,CAAC,CAAC;IACFZ,aAAa,CAACa,OAAO,CAAC;EACxB;EAEA,SAASI,UAAUA,CAACC,MAAM,EAAE;IACxBlB,aAAa,CAAC,CAAC,GAAGD,UAAU,EAAEmB,MAAM,CAAC,CAAC;EACxC;EAEF,oBACItB,OAAA;IAAKuB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBxB,OAAA,CAACH,KAAK;MAAC4B,aAAa,EAAEtB,UAAW;MAC7BuB,eAAe,EAAEX;IAAmB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3C9B,OAAA,CAACF,IAAI;MAACiC,YAAY,EAAEV;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAGZ;AAAC5B,EAAA,CAxCMD,KAAK;AAAA+B,EAAA,GAAL/B,KAAK;AA2CZ,eAAeA,KAAK,CAAC,CAAC;AACtB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}