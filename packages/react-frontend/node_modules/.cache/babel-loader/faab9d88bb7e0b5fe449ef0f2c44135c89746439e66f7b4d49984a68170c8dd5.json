{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivpri\\\\csc307-react-app\\\\packages\\\\react-frontend\\\\src\\\\MyApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; //need to make our MyApp component call fetchUser function \n//the first time the component is rendered, to start the process of requesting the data\nimport Table from \"./Table\";\nimport Form from './Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyApp() {\n  _s();\n  //current state value: characters, update function: setCharacters\n  //const makes a tuple pair \n  const [characters, setCharacters] = useState([]);\n  function fetchUsers() {\n    const promise = fetch(\"http://localhost:8000/users\");\n    return promise; //built in promise: asynchronus processing in JS, need to perform an operation \n    //which will take time to finish/may never finish. don't want code to wait for data to come back to server\n  }\n  // makes a request to the URL which is given as a parameter. \n  // But instead of waiting for the response, it returns immediately with a promise. \n  // This promise will be fulfilled when the response is received back from the server.\n\n  function postUser(person) {\n    const promise = fetch(\"Http://localhost:8000/users\", {\n      method: \"POST\",\n      //makes POST instead of GET\n      headers: {\n        \"Content-Type\": \"application/json\" //to tell the server that the body contains a JSON-formatted object\n      },\n\n      body: JSON.stringify(person) //to put the person data into the body of the request\n    });\n\n    return promise;\n  }\n  useEffect(() => {\n    //when the promise returned by fetchUsers is fulfilled, we want to set the component state using setCharacters:\n    fetchUsers().then(res => res.json()) // returns a promise, which is only fulfilled when the data is successfully decoded.\n    .then(json => setCharacters(json[\"users_list\"])) //parse response into javascript object, initialize state of comp with given data\n    .catch(error => {\n      console.log(error);\n    });\n  }, []);\n  function removeOneCharacter(id) {\n    fetch(`http://localhost:8000/users/${id}`, {\n      method: 'DELETE' // Specify the DELETE method\n    }).then(response => {\n      if (response.status === 204) {\n        // User deleted successfully, so update the frontend state\n        //filtering by which ever users don't match the given ID\n        setCharacters(characters.filter(character => character.id !== id));\n      } else if (response.status === 404) {\n        // User not found, handle this case if necessary\n        console.log('User not found.');\n      } else {\n        // Handle other status codes if needed\n        console.log('Failed to delete user.');\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  function updateList(person) {\n    postUser(person).then(response => {\n      if (response.status === 201) {\n        // Check if the response code is 201 (Created)\n        return response.json(); // Parse the response data\n      } else {\n        throw new Error('Failed to create user'); // Throw an error for non-201 responses\n      }\n    }).then(createdPerson => {\n      // Only update the list when a 201 status is received\n      setCharacters([...characters, createdPerson]);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      characterData: characters,\n      removeCharacter: removeOneCharacter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      handleSubmit: updateList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(MyApp, \"Lpb9AbqKJ07+xuj4aZ1twNw87e0=\");\n_c = MyApp;\nexport default MyApp; //makes component available to be\n//imported into other comps\nvar _c;\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"names":["React","useState","useEffect","Table","Form","jsxDEV","_jsxDEV","MyApp","_s","characters","setCharacters","fetchUsers","promise","fetch","postUser","person","method","headers","body","JSON","stringify","then","res","json","catch","error","console","log","removeOneCharacter","id","response","status","filter","character","updateList","Error","createdPerson","className","children","characterData","removeCharacter","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","_c","$RefreshReg$"],"sources":["C:/Users/ivpri/csc307-react-app/packages/react-frontend/src/MyApp.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'; //need to make our MyApp component call fetchUser function \r\n//the first time the component is rendered, to start the process of requesting the data\r\nimport Table from \"./Table\";\r\nimport Form from './Form';\r\n\r\n\r\nfunction MyApp() {\r\n    //current state value: characters, update function: setCharacters\r\n    //const makes a tuple pair \r\n    const [characters, setCharacters] = useState([]);\r\n    \r\n    function fetchUsers() {\r\n      const promise = fetch(\"http://localhost:8000/users\");\r\n      return promise; //built in promise: asynchronus processing in JS, need to perform an operation \r\n      //which will take time to finish/may never finish. don't want code to wait for data to come back to server\r\n    }\r\n    // makes a request to the URL which is given as a parameter. \r\n    // But instead of waiting for the response, it returns immediately with a promise. \r\n    // This promise will be fulfilled when the response is received back from the server.\r\n    \r\n    function postUser(person) {\r\n      const promise = fetch(\"Http://localhost:8000/users\", {\r\n        method: \"POST\", //makes POST instead of GET\r\n        headers: {\r\n          \"Content-Type\": \"application/json\", //to tell the server that the body contains a JSON-formatted object\r\n        },\r\n        body: JSON.stringify(person), //to put the person data into the body of the request\r\n      });\r\n  \r\n      return promise;\r\n    }\r\n\r\n    useEffect(() => {//when the promise returned by fetchUsers is fulfilled, we want to set the component state using setCharacters:\r\n      fetchUsers()\r\n        .then((res) => res.json()) // returns a promise, which is only fulfilled when the data is successfully decoded.\r\n        .then((json) => setCharacters(json[\"users_list\"])) //parse response into javascript object, initialize state of comp with given data\r\n        .catch((error) => { console.log(error); });\r\n    }, [] );\r\n\r\n    function removeOneCharacter(id) {\r\n      fetch(`http://localhost:8000/users/${id}`, {\r\n          method: 'DELETE', // Specify the DELETE method\r\n      })\r\n      .then((response) => {\r\n          if (response.status === 204) {\r\n              // User deleted successfully, so update the frontend state\r\n              //filtering by which ever users don't match the given ID\r\n              setCharacters(characters.filter((character) => character.id !== id));\r\n          } else if (response.status === 404) {\r\n              // User not found, handle this case if necessary\r\n              console.log('User not found.');\r\n          } else {\r\n              // Handle other status codes if needed\r\n              console.log('Failed to delete user.');\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          console.log(error);\r\n      });\r\n  }\r\n\r\n    function updateList(person) {\r\n      postUser(person)\r\n        .then((response) => {\r\n          if (response.status === 201) { // Check if the response code is 201 (Created)\r\n            return response.json(); // Parse the response data\r\n          } else {\r\n            throw new Error('Failed to create user'); // Throw an error for non-201 responses\r\n          }\r\n        })\r\n        .then((createdPerson) => {\r\n          // Only update the list when a 201 status is received\r\n          setCharacters([...characters, createdPerson]);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Table characterData={characters} \r\n                removeCharacter={removeOneCharacter} />\r\n            <Form handleSubmit={updateList} />\r\n        </div>  \r\n    )\r\n\r\n  }\r\n\r\n\r\n  export default MyApp; //makes component available to be\r\n  //imported into other comps\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}